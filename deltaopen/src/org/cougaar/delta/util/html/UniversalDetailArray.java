/*
  * <copyright>
  *  Copyright 2002 BBNT Solutions, LLC
  *  under sponsorship of the Defense Advanced Research Projects Agency (DARPA)
  *  and the Defense Logistics Agency (DLA).
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the Cougaar Open Source License as published by
  *  DARPA on the Cougaar Open Source Website (www.cougaar.org).
  *
  *  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
  *  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
  *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
  *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
  *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
  *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
  *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
  *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  *  PERFORMANCE OF THE COUGAAR SOFTWARE.
  * </copyright>
  */

package org.cougaar.delta.util.html;

import org.cougaar.delta.util.variant.*;
import java.util.*;
import java.io.*;

/**
 *  UniversalDetailArray is a class designed to extend the abilities of the
 *  class {@link UniversalDetailItem} to attributes that are arrays, Vectors, or
 *  Enumerations.  {@link StringMap} instances are used to generate the content, and
 *  either a {@link StringMap} or a String array gives the display names.
 */
public class UniversalDetailArray extends UniversalDetailItem {

  // a VariantMap that computes the array, Vector, or Enumeration containing
  // the data items to be displayed
  private VariantMap sequenceMap = null;

  // an array of names to use for the rows generated by this section--
  // this is useful if the positions in the array are meaningful or if
  // the first finitely-many rows (typically just the first row) should have
  // specific names
  private String[] names = null;
  private String[] explanations = null;

  // a message to show when the array, Vector, or Enumeration has no elements
  // to display.
  private String emptyMessage = null;

  /**
   *  Set the message to display in case of no records.  If the message is set
   *  to null, no rows are generated.
   *  @param s the message
   */
  public void setEmptyMessage (String s) {
    emptyMessage = s;
  }

  /**
   *  Discover the message displayed by this detail element when no data is
   *  available.
   *  @return the default message
   */
  public String getEmptyMessage () {
    return emptyMessage;
  }

  /**
   *  Construct a new UniversalDetailArray with the given field name and maps
   *  for row names and content.
   *  @param field the name of the bean property containing the array
   *  @param nameMap a StringMap that computes the HTML name of each array element
   *  @param contentMap a StringMap that calculates the content for each array element
   */
  public UniversalDetailArray (String field, StringMap nameMap, StringMap contentMap) {
    this.field = field;
    this.nameMap = nameMap;
    this.contentMap = contentMap;
  }

  /**
   *  Construct a new UniversalDetailArray with the given field name,
   *  row names, and mapping for content values
   *  @param field the name of the bean property containing the array
   *  @param names an array of names to use for the HTML row names
   *  @param contentMap a StringMap that calculates the content for each array element
   */
  public UniversalDetailArray (String field, String[] names, StringMap contentMap) {
    this.field = field;
    this.names = names;
    this.contentMap = contentMap;
  }
  public UniversalDetailArray (String field, String[] names, String[] explanations, StringMap contentMap) {
    this.field = field;
    this.names = names;
    this.explanations = explanations;
    this.contentMap = contentMap;
  }

  /**
   *  Construct a new UniversalDetailArray with the given maps for the element
   *  sequence, row names, and content values.
   *  @param field the name of the bean property containing the array
   *  @param nameMap a StringMap that computes the HTML name of each array element
   *  @param contentMap a StringMap that calculates the content for each array element
   */
  public UniversalDetailArray (VariantMap f, StringMap n, StringMap cm) {
    sequenceMap = f;
    nameMap = n;
    contentMap = cm;
  }

  /**
   *  Construct a new UniversalDetailArray with the given field map,
   *  row names, and mapping for content values
   *  @param f a mapping that extracts the list of data elements
   *  @param n an array of names to use for the HTML row names
   *  @param cm a StringMap that calculates the content for each array element
   */
  public UniversalDetailArray (VariantMap f, String[] n, StringMap cm) {
    sequenceMap = f;
    names = n;
    contentMap = cm;
  }
  public UniversalDetailArray (VariantMap f, String[] n, String[] e, StringMap cm) {
    sequenceMap = f;
    names = n;
    explanations = e;
    contentMap = cm;
  }

  /**
   *  generate the HTML representation for this array.  In the case where row
   *  names are assigned by a {@link StringMap}, the same map is applied to each element.
   *  In the case of an array of names, the names are taken in order and
   *  paired with content derived from elements from the bean property.
   *  Exactly one row is displayed for each content element, regardless of how
   *  many names are supplied (missing names are assigned blank and extra names
   *  are ignored).
   *  @param o a PrintWriter to take the output
   *  @param data the data object
   */
  public void generateHtml (PrintWriter o, DataWrapper data) {
    Variant p = null;
    if (field != null)
      p = data.getProperty(field);
    else if (sequenceMap != null)
      p = sequenceMap.map(data);

    if (p == null) {
      if (emptyMessage != null)
        generateRow(o, emptyMessage, "");
    }
    else {
      Object a = p.getValue();
      Enumeration enu = null;
      if (a instanceof Enumeration)
        enu = (Enumeration) a;
      else if (a instanceof Vector)
        enu = ((Vector) a).elements();
      else if (a instanceof Object[])
        enu = new EnumeratedArray((Object[]) a);
      else
        System.out.println("\"" + field +
          "\" is not an array, a Vector, or an Enumeration");
      if (!enu.hasMoreElements()) {
        if (emptyMessage != null)
          generateRow(o, emptyMessage, "");
      }
      else if (nameMap != null) {
        while (enu.hasMoreElements()) {
          Object elt = enu.nextElement();
          generateRow(o, nameMap.map(elt), HTML.encode(contentMap.map(elt), true));
        }
      }
      else if (names != null) {
        int i = 0;
        while (enu.hasMoreElements()) {
          Object elt = enu.nextElement();
          if(explanations != null) {
            generateRow(o, (i < names.length ? names[i] : ""),
            (i < explanations.length ? explanations[i] : ""),
            HTML.encode(contentMap.map(elt), true));
          }
          else {
            generateRow(o, (i < names.length ? names[i] : ""),
            HTML.encode(contentMap.map(elt), true));
          }
          i++;
        }
      }
    }
  }
}
