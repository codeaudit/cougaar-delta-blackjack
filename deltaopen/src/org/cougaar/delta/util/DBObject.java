/*
  * <copyright>
  *  Copyright 2002 BBNT Solutions, LLC
  *  under sponsorship of the Defense Advanced Research Projects Agency (DARPA)
  *  and the Defense Logistics Agency (DLA).
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the Cougaar Open Source License as published by
  *  DARPA on the Cougaar Open Source Website (www.cougaar.org).
  *
  *  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
  *  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
  *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
  *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
  *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
  *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
  *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
  *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  *  PERFORMANCE OF THE COUGAAR SOFTWARE.
  * </copyright>
  */

package org.cougaar.delta.util;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.beans.*;
import java.util.Vector;
import java.util.Date;


/**
 * Base class for database objects.  Contains utility methods and listener stuff.
 * @author ALPINE (alpine-software@bbn.com)
 * @version $Id: DBObject.java,v 1.1 2002-04-30 17:33:27 cerys Exp $
 */
public class DBObject implements Serializable{

  public static Vector makeVector(Object [] o)
  {
    Vector ret = new Vector(o.length);
    for (int i=0; i<o.length; i++)
      ret.addElement(o[i]);
    return ret;
  }

  /**
   * Serialize this object
   * @param oos the output stream to serialize to
   * @exception IOException
   */
  private void writeObject(ObjectOutputStream oos) throws IOException {
    oos.defaultWriteObject();
  }

  /**
   * De-serialize this object
   * @param ois the input stream to serialize from
   * @exception ClassNotFoundException
   * @exception IOException
   */
  private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {
    ois.defaultReadObject();
    // These are transient and need to be re-created for read objects
    propertyChangeListeners = new PropertyChangeSupport(this);
    vetoableChangeListeners = new VetoableChangeSupport(this);
  }


  public synchronized void removePropertyChangeListener(PropertyChangeListener l) {
    propertyChangeListeners.removePropertyChangeListener(l);
  }

  public synchronized void addPropertyChangeListener(PropertyChangeListener l) {
    propertyChangeListeners.addPropertyChangeListener(l);
  }

  public synchronized boolean hasPropertyChangeListeners() {
    // need to pass in a String, but we don't use property strings in these
    // method interfaces, so don't use it here either.
    return propertyChangeListeners.hasListeners("");
  }

  public synchronized void removeVetoableChangeListener(VetoableChangeListener l) {
    vetoableChangeListeners.removeVetoableChangeListener(l);
  }

  public synchronized void addVetoableChangeListener(VetoableChangeListener l) {
    vetoableChangeListeners.addVetoableChangeListener(l);
  }

  /**
   * Set the internal database ID of this object.  This number is generated by
   * the database and should not be changed under normal circumstances
   * @param newDatabaseId the new database key to assign to this object
   * @see #getDatabaseId
   */
  public void setDatabaseId(long newDatabaseId) {
    long oldDatabaseId = databaseId;
    databaseId = newDatabaseId;
    propertyChangeListeners.firePropertyChange("databaseId", new Long(oldDatabaseId), new Long(newDatabaseId));
  }

  /**
   * Get the internal database ID of this object.  This number is generated by
   * the database and should not be interesting under normal circumstances
   * @return the new internal database key assigned to this object
   * @see #setDatabaseId
   */
  public long getDatabaseId() {
    return databaseId;
  }

  /**
   * Set the internal database version (generation count) of this object.  This number is generated by
   * the database and should not be changed under normal circumstances
   * @param newVersion the new database version number to assign to this object
   * @see #getVersion
   */
  public void setVersion(long newVersion) {
    long oldVersion = version;
    version = newVersion;
    propertyChangeListeners.firePropertyChange("version", new Long(oldVersion), new Long(newVersion));
  }

  /**
   * Get the internal database version of this object.  This number is generated by
   * the database and should not be interesting under normal circumstances
   * @return the new internal database version number assigned to this object
   * @see #setVersion
   */
  public long getVersion() {
    return version;
  }

  /**
   * Increment the internal database version of this object.  This number is generated by
   * the database and should not be interesting under normal circumstances
   * @return the new internal database version number assigned to this object
   * @see #setVersion
   */
  public long incrementVersion() {
    version++;
    return version;
  }

  /**
   * Set the creation date of this object.
   * @param newCreationDate the creation date of this object
   * @see #getCreationDate
   */
  public void setCreationDate(Date newCreationDate) {
    Date oldDate = creationDate;
    creationDate = newCreationDate;
    propertyChangeListeners.firePropertyChange("creationDate", oldDate, newCreationDate);
    }

  /**
   * Get the creation date of this object.
   * @see #setCreationDate
   */
  public Date getCreationDate() {
    return creationDate;
  }

  /**
   * Set the creator of this object.
   * @param newCreator the creator of this object
   * @see #getCreator
   */
   /*
  public void setCreator(FgiUser newCreator) {
    FgiUser oldCreator = creator;
    creator = newCreator;
    propertyChangeListeners.firePropertyChange("creator", oldCreator, newCreator);
    }*/

  /**
   * Get the creator of this object.
   * @see #setCreator
   */
   /*
  public FgiUser getCreator() {
    return creator;
  }*/

  /**
   * Get the database ID of the creator of this object.
   * @see #getCreator
   */
   /*
  public Long getCreatorId() {
    return (creator==null) ? null : new Long(creator.getDatabaseId());
  }*/


  /**
   * Set the modification date of this object.
   * @param newModificationDate the modification date of this object
   * @see #getModificationDate
   */
  public void setModificationDate(Date newModificationDate) {
    Date oldDate = modificationDate;
    modificationDate = newModificationDate;
    propertyChangeListeners.firePropertyChange("modificationDate", oldDate, newModificationDate);
    }

  /**
   * Get the modification date of this object.
   * @see #setModificationDate
   */
  public Date getModificationDate() {
    return modificationDate;
  }

  /**
   * Set the modifier of this object.
   * @param newModifier the modifier of this object
   * @see #getModifier
   */
   /*
  public void setModifier(FgiUser newModifier) {
    FgiUser oldModifier = modifier;
    modifier = newModifier;
    propertyChangeListeners.firePropertyChange("modifier", oldModifier, newModifier);
    }*/

  /**
   * Get the modifier of this object.
   * @see #setModifier
   */
   /*
  public FgiUser getModifier() {
    return modifier;
  }*/

  /**
   * Get the database ID of the modifier of this object.
   * @see #getModifier
   */
   /*
  public Long getModifierId() {
    return (modifier==null) ? null : new Long(modifier.getDatabaseId());
  }*/


  public static final long NULL_DATABASE_ID = -1;
  protected transient PropertyChangeSupport propertyChangeListeners = new PropertyChangeSupport(this);
  protected transient VetoableChangeSupport vetoableChangeListeners = new VetoableChangeSupport(this);
  protected long databaseId = NULL_DATABASE_ID;
  protected long version = 0;
  protected Date creationDate;
//  protected FgiUser creator;
  protected Date modificationDate;
//  protected FgiUser modifier;

}
